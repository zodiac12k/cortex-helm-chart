## Container image settings.
## Since the image is unique for all microservices, so are image settings.

image:
  repository: quay.io/cortexproject/cortex
  tag: v1.3.0
  pullPolicy: IfNotPresent


  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ##
  # pullSecrets:
  #   - myRegistrKeySecretName

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - /
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

serviceAccount:
  create: true
  name:
  annotations: {}

useExternalConfig: false
externalConfigSecretName: 'secret-with-config.yaml'
externalConfigVersion: '0'
config:
  auth_enabled: true
  ingester:
    max_transfer_retries: 0
    lifecycler:
      join_after: 0s
      final_sleep: 0s
      num_tokens: 512
      ring:
        replication_factor: 1
        kvstore:
          store: consul
          prefix: 'collectors/'
          consul:
            host: 'cortex-consul-server:8500'
            http_client_timeout: '20s'
            consistent_reads: true
  limits:
    # Per-user ingestion rate limit in samples per second.
    # CLI flag: -distributor.ingestion-rate-limit
    ingestion_rate: 250000
    enforce_metric_name: false
    reject_old_samples: true
    reject_old_samples_max_age: 168h
    # Maximum number of label names per series.
    # CLI flag: -validation.max-label-names-per-series
    max_label_names_per_series: 100
#  schema:
#    configs:
#      - from: 2019-07-29
#        store: cassandra
#        object_store: cassandra
#        schema: v10
#        index:
#          prefix: index_
#          period: 168h
  server:
    http_listen_port: 8080
    grpc_listen_port: 9095
    grpc_server_max_recv_msg_size: 104857600
    grpc_server_max_send_msg_size: 104857600
    grpc_server_max_concurrent_streams: 1000
    log_level: "info"
  ingester_client:
    grpc_client_config:
      max_recv_msg_size: 104857600
      max_send_msg_size: 104857600
      grpc_compression: "gzip"
  # See https://github.com/cortexproject/cortex/blob/master/docs/configuration/config-file-reference.md#storage_config
  storage:
    engine: "blocks"
#    cassandra:
#      addresses: # configure cassandra addresses here.
#      keyspace: cortex # configure desired keyspace here.
#      auth: true
#      username: # configure cassandra user here.
#      password: # configure cassandra password here.
#    azure:
#      container_name: # configure azure blob container name here.
#      account_name: # configure azure storage account name here.
#      account_key: # configure azure storage account key here.
    # aws:
    #   dynamodb:
    #     dynamodb_url:
    #     api_limit:
    #     throttle_limit:
    #     metrics:
    #       url:
    #       target_queue_length:
    #       scale_up_factor:
    #       ignore_throttle_below:
    #       queue_length_query:
    #       write_throttle_query:
    #       write_usage_query:
    #       read_usage_query:
    #       read_error_query:
    #     chunk_gang_size:
    #     chunk_get_max_parallelism:
    #   s3:
    #   bucketnames:
    #   s3forcepathstyle:
#    index_queries_cache_config:
#      memcached:
#        expiration: 1h
#      memcached_client:
#        timeout: 1s
#  chunk_store:
#    max_look_back_period: 0s
#    chunk_cache_config:
#      memcached:
#        expiration: 1h
#      memcached_client:
#        timeout: 1s
#  table_manager:
#    retention_deletes_enabled: false
#    retention_period: 0s
  distributor:
    shard_by_all_labels: true
    pool:
      health_check_ingesters: true
  querier:
    active_query_tracker_dir: /data/cortex/querier
    query_ingesters_within: 12h
  query_range:
    split_queries_by_interval: 24h
    align_queries_with_step: true
    cache_results: true
    results_cache:
      cache:
        memcached:
          expiration: 1h
        memcached_client:
          timeout: 1s
  ruler:
    # file path to store temporary rule files for the prometheus rule managers
    # CLI flag: -ruler.rule-path
    rule_path: "/data/rules"
    # Enable the ruler api
    # CLI flag: -experimental.ruler.enable-api
    enable_api: true
  alertmanager:
    # The URL under which Alertmanager is externally reachable (for example, if
    # Alertmanager is served via a reverse proxy). Used for generating relative and
    # absolute links back to Alertmanager itself. If the URL has a path portion, it
    # will be used to prefix all HTTP endpoints served by Alertmanager. If omitted,
    # relevant URL components will be derived automatically.
    # CLI flag: -alertmanager.web.external-url
    external_url: "/api/prom/alertmanager"
    # Enable the experimental alertmanager config api.
    # CLI flag: -experimental.alertmanager.enable-api
    enable_api: true
  frontend:
    #max_outstanding_per_tenant: 1000
    log_queries_longer_than: 10s
    compress_responses: true
  blocks_storage:
    # Backend storage to use. Supported backends are: s3, gcs, azure, filesystem.
    # CLI flag: -experimental.blocks-storage.backend
    backend: "azure"

    bucket_store:
      # Directory to store synchronized TSDB index headers.
      # CLI flag: -experimental.blocks-storage.bucket-store.sync-dir
      sync_dir: "/data/tsdb-sync"

      index_cache:
        # The index cache backend type. Supported values: inmemory, memcached.
        # CLI flag: -experimental.blocks-storage.bucket-store.index-cache.backend
        backend: "memcached"

        memcached:
          # Comma separated list of memcached addresses. Supported prefixes are:
          # dns+ (looked up as an A/AAAA query), dnssrv+ (looked up as a SRV query,
          # dnssrvnoa+ (looked up as a SRV query, with no A/AAAA lookup made after
          # that).
          # CLI flag: -experimental.blocks-storage.bucket-store.index-cache.memcached.addresses
          addresses: "cortex-memcached-index:11211"

      chunks_cache:
        # Backend for chunks cache, if not empty. Supported values: memcached.
        # CLI flag: -experimental.blocks-storage.bucket-store.chunks-cache.backend
        backend: "memcached"

        memcached:
          # Comma separated list of memcached addresses. Supported prefixes are:
          # dns+ (looked up as an A/AAAA query), dnssrv+ (looked up as a SRV query,
          # dnssrvnoa+ (looked up as a SRV query, with no A/AAAA lookup made after
          # that).
          # CLI flag: -experimental.blocks-storage.bucket-store.chunks-cache.memcached.addresses
          addresses: "cortex-memcached-chunks:11211"

      metadata_cache:
        # Backend for metadata cache, if not empty. Supported values: memcached.
        # CLI flag: -experimental.blocks-storage.bucket-store.metadata-cache.backend
        backend: "memcached"

        memcached:
          # Comma separated list of memcached addresses. Supported prefixes are:
          # dns+ (looked up as an A/AAAA query), dnssrv+ (looked up as a SRV query,
          # dnssrvnoa+ (looked up as a SRV query, with no A/AAAA lookup made after
          # that).
          # CLI flag: -experimental.blocks-storage.bucket-store.metadata-cache.memcached.addresses
          addresses: "cortex-memcached-metadata:11211"

    tsdb:
      # Local directory to store TSDBs in the ingesters.
      # CLI flag: -experimental.blocks-storage.tsdb.dir
      dir: "/data/tsdb"

      # TSDB blocks range period.
      # CLI flag: -experimental.blocks-storage.tsdb.block-ranges-period
#      block_ranges_period: 2h

      # TSDB blocks retention in the ingester before a block is removed. This should
      # be larger than the block_ranges_period and large enough to give
      # store-gateways and queriers enough time to discover newly uploaded blocks.
      # CLI flag: -experimental.blocks-storage.tsdb.retention-period
      retention_period: 6h

    azure:
        # Azure storage account name
        # CLI flag: -blocks-storage.azure.account-name
        account_name: stcontrolstg

        # Azure storage account key
        # CLI flag: -blocks-storage.azure.account-key
        account_key: pRVJvoJsOs1H3uP0GXInORORBnu/sPH0SZQzIabnqCcYCQI5h7lkMtYJbtsy4ddCy4WznA8JPzwmEiYRMOve8Q==

        # Azure storage container name
        # CLI flag: -blocks-storage.azure.container-name
        container_name: cortex

  store_gateway:
    # Shard blocks across multiple store gateway instances. This option needs be set
    # both on the store-gateway and querier when running in microservices mode.
    # CLI flag: -experimental.store-gateway.sharding-enabled
    sharding_enabled: false

rbac:
  create: true
  pspEnabled: true

alertmanager:
  replicas: 1

  statefulSet:
    ## If true, use a statefulset instead of a deployment for pod management.
    ## This is useful for using a persistent volume for storing silences between restarts
    ##
    enabled: false

  service:
    annotations: {}
    labels: {}

  resources: {}
#    limits:
#      cpu: 200m
#      memory: 256Mi
#    requests:
#      cpu: 10m
#      memory: 32Mi

  ## Additional Cortex container arguments, e.g. log level (debug, info, warn, error)
  extraArgs:
    {}
    # log.level: debug

  ## Pod Labels
  podLabels: {}

  ## Pod Annotations
  podAnnotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: 'http-metrics'

  nodeSelector: {}
  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        preference:
          matchExpressions:
          - key: beta.kubernetes.io/arch
            operator: In
            values:
            - "amd64"
          - key: node-role.kubernetes.io/monitoring
            operator: Exists
  annotations: {}

  ## DEPRECATED: use persistentVolume.subPath instead
  persistence:
    subPath:

  persistentVolume:
    ## If true and alertmanager.statefulSet.enabled is true,
    ## Alertmanager will create/use a Persistent Volume Claim
    ## If false, use emptyDir
    ##
    enabled: true

    ## Alertmanager data Persistent Volume Claim annotations
    ##
    annotations: {}

    ## Alertmanager data Persistent Volume access modes
    ## Must match those of existing PV or dynamic provisioner
    ## Ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    accessModes:
      - ReadWriteOnce

    ## Alertmanager data Persistent Volume size
    ##
    size: 2Gi

    ## Subdirectory of Alertmanager data Persistent Volume to mount
    ## Useful if the volume's root directory is not empty
    ##
    subPath: ''

    ## Alertmanager data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"

  livenessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45

  securityContext:
    {}
    #fsGroup: 10001
    #runAsGroup: 10001
    #runAsNonRoot: true
    #runAsUser: 10001

  ## Tolerations for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []

  # The values to set in the PodDisruptionBudget spec
  # If not set then a PodDisruptionBudget will not be created
  podDisruptionBudget: {}
  # minAvailable: 1
  # maxUnavailable: 1

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  statefulStrategy:
    type: RollingUpdate

  terminationGracePeriodSeconds: 60

  initContainers: []
  ## Init containers to be added to the cortex pod.
  # - name: my-init-container
  #   image: busybox:latest
  #   command: ['sh', '-c', 'echo hello']

  extraContainers: []
  ## Additional containers to be added to the cortex pod.
  # - name: reverse-proxy
  #   image: angelbarrera92/basic-auth-reverse-proxy:dev
  #   args:
  #     - "serve"
  #     - "--upstream=http://localhost:3100"
  #     - "--auth-config=/etc/reverse-proxy-conf/authn.yaml"
  #   ports:
  #     - name: http
  #       containerPort: 11811
  #       protocol: TCP
  #   volumeMounts:
  #     - name: reverse-proxy-auth-config
  #       mountPath: /etc/reverse-proxy-conf

  extraVolumes: []
  ## Additional volumes to the cortex pod.
  # - name: reverse-proxy-auth-config
  #   secret:
  #     secretName: reverse-proxy-auth-config

  ## Extra volume mounts that will be added to the cortex container
  extraVolumeMounts: []

  extraPorts: []
  ## Additional ports to the cortex services. Useful to expose extra container ports.
  # - port: 11811
  #   protocol: TCP
  #   name: http
  #   targetPort: http

  # Extra env variables to pass to the cortex container
  env: []

distributor:
  replicas: 2

  service:
    annotations: {}
    labels: {}

  resources: {}
#    limits:
#      cpu: 1
#      memory: 1Gi
#    requests:
#      cpu: 100m
#      memory: 512Mi

  ## Additional Cortex container arguments, e.g. log level (debug, info, warn, error)
  extraArgs:
    {}
    # log.level: debug

  ## Pod Labels
  podLabels: {}

  ## Pod Annotations
  podAnnotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: 'http-metrics'

  nodeSelector: {}
  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        preference:
          matchExpressions:
          - key: beta.kubernetes.io/arch
            operator: In
            values:
            - "amd64"
          - key: node-role.kubernetes.io/monitoring
            operator: Exists
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: target
                  operator: In
                  values:
                    - distributor
            topologyKey: 'kubernetes.io/hostname'

  annotations: {}
  persistence:
    subPath:

  livenessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45

  securityContext: {}

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1

  terminationGracePeriodSeconds: 60

  tolerations: []
  podDisruptionBudget: {}
  initContainers: []
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []
  extraPorts: []
  env: []

ingester:
  replicas: 3

  statefulSet:
    ## If true, use a statefulset instead of a deployment for pod management.
    ## This is useful when using WAL
    ##
    enabled: false

  service:
    annotations: {}
    labels: {}

  resources: {}
#    limits:
#      cpu: 1
#      memory: 1Gi
#    requests:
#      cpu: 100m
#      memory: 512Mi

  ## Additional Cortex container arguments, e.g. log level (debug, info, warn, error)
  extraArgs:
    {}
    # log.level: debug

  ## Pod Labels
  podLabels: {}

  ## Pod Annotations
  podAnnotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: 'http-metrics'

  nodeSelector: {}
  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        preference:
          matchExpressions:
          - key: beta.kubernetes.io/arch
            operator: In
            values:
            - "amd64"
          - key: node-role.kubernetes.io/monitoring
            operator: Exists
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: target
                  operator: In
                  values:
                    - ingester
            topologyKey: 'kubernetes.io/hostname'

  annotations: {}

  ## DEPRECATED: use persistentVolume.subPath instead
  persistence:
    subPath:

  persistentVolume:
    ## If true and ingester.statefulSet.enabled is true,
    ## Ingester will create/use a Persistent Volume Claim
    ## If false, use emptyDir
    ##
    enabled: true

    ## Ingester data Persistent Volume Claim annotations
    ##
    annotations: {}

    ## Ingester data Persistent Volume access modes
    ## Must match those of existing PV or dynamic provisioner
    ## Ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    accessModes:
      - ReadWriteOnce

    ## Ingester data Persistent Volume size
    ##
    size: 2Gi

    ## Subdirectory of Ingester data Persistent Volume to mount
    ## Useful if the volume's root directory is not empty
    ##
    subPath: ''


    ## Ingester data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"

  livenessProbe:
    failureThreshold: 20 # 10 minutes failure threshold
    httpGet:
      path: /ready
      port: http-metrics
      scheme: HTTP
    initialDelaySeconds: 180
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 1
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 60

  securityContext: {}

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  statefulStrategy:
    type: RollingUpdate

  terminationGracePeriodSeconds: 240

  tolerations: []
  podDisruptionBudget: {}
  initContainers: []
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []
  extraPorts: []
  env: []

ruler:
  replicas: 1

  service:
    annotations: {}
    labels: {}

  resources: {}
#    limits:
#      cpu: 200m
#      memory: 256Mi
#    requests:
#      cpu: 10m
#      memory: 32Mi

  ## Additional Cortex container arguments, e.g. log level (debug, info, warn, error)
  extraArgs:
    {}
    # log.level: debug

  ## Pod Labels
  podLabels: {}

  ## Pod Annotations
  podAnnotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: 'http-metrics'

  nodeSelector: {}
  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        preference:
          matchExpressions:
          - key: beta.kubernetes.io/arch
            operator: In
            values:
            - "amd64"
          - key: node-role.kubernetes.io/monitoring
            operator: Exists
  annotations: {}
  persistence:
    subPath:

  livenessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45

  securityContext: {}

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1

  terminationGracePeriodSeconds: 180

  tolerations: []
  podDisruptionBudget: {}
  initContainers: []
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []
  extraPorts: []
  env: []

querier:
  replicas: 2

  service:
    annotations: {}
    labels: {}

  resources: {}
#    limits:
#      cpu: 1
#      memory: 1Gi
#    requests:
#      cpu: 50m
#      memory: 128Mi

  ## Additional Cortex container arguments, e.g. log level (debug, info, warn, error)
  extraArgs:
    {}
    # log.level: debug

  ## Pod Labels
  podLabels: {}

  ## Pod Annotations
  podAnnotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: 'http-metrics'

  nodeSelector: {}
  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        preference:
          matchExpressions:
          - key: beta.kubernetes.io/arch
            operator: In
            values:
            - "amd64"
          - key: node-role.kubernetes.io/monitoring
            operator: Exists
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: target
                  operator: In
                  values:
                    - querier
            topologyKey: 'kubernetes.io/hostname'

  annotations: {}
  persistence:
    subPath:

  livenessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45

  securityContext: {}

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1

  terminationGracePeriodSeconds: 180

  tolerations: []
  podDisruptionBudget: {}
  initContainers: []
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []
  extraPorts: []
  env: []

query_frontend:
  replicas: 2

  service:
    annotations: {}
    labels: {}

  resources: {}
#    limits:
#      cpu: 1
#      memory: 256Mi
#    requests:
#      cpu: 10m
#      memory: 32Mi

  ## Additional Cortex container arguments, e.g. log level (debug, info, warn, error)
  extraArgs:
    {}
    # log.level: debug

  ## Pod Labels
  podLabels: {}

  ## Pod Annotations
  podAnnotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: 'http-metrics'

  nodeSelector: {}
  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        preference:
          matchExpressions:
          - key: beta.kubernetes.io/arch
            operator: In
            values:
            - "amd64"
          - key: node-role.kubernetes.io/monitoring
            operator: Exists
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: target
                  operator: In
                  values:
                    - query-frontend
            topologyKey: 'kubernetes.io/hostname'

  annotations: {}
  persistence:
    subPath:

  livenessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45

  securityContext: {}

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1

  terminationGracePeriodSeconds: 180

  tolerations: []
  podDisruptionBudget: {}
  initContainers: []
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []
  extraPorts: []
  env: []

table_manager:
  replicas: 1

  service:
    annotations: {}
    labels: {}

  resources: {}
#    limits:
#      cpu: 1
#      memory: 1Gi
#    requests:
#      cpu: 10m
#      memory: 32Mi

  ## Additional Cortex container arguments, e.g. log level (debug, info, warn, error)
  extraArgs:
    {}
    # log.level: debug

  ## Pod Labels
  podLabels: {}

  ## Pod Annotations
  podAnnotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: 'http-metrics'

  nodeSelector: {}
  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        preference:
          matchExpressions:
          - key: beta.kubernetes.io/arch
            operator: In
            values:
            - "amd64"
          - key: node-role.kubernetes.io/monitoring
            operator: Exists
  annotations: {}
  persistence:
    subPath:

  livenessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45

  securityContext: {}

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1

  terminationGracePeriodSeconds: 180

  tolerations: []
  podDisruptionBudget: {}
  initContainers: []
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []
  extraPorts: []
  env: []

configs:
  replicas: 1

  service:
    annotations: {}
    labels: {}

  resources: {}
#    limits:
#      cpu: 1
#      memory: 1Gi
#    requests:
#      cpu: 10m
#      memory: 32Mi

  ## Additional Cortex container arguments, e.g. log level (debug, info, warn, error)
  extraArgs:
    {}
    # log.level: debug

  ## Pod Labels
  podLabels: {}

  ## Pod Annotations
  podAnnotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: 'http-metrics'

  nodeSelector: {}
  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        preference:
          matchExpressions:
          - key: beta.kubernetes.io/arch
            operator: In
            values:
            - "amd64"
          - key: node-role.kubernetes.io/monitoring
            operator: Exists
  annotations: {}
  persistence:
    subPath:

  livenessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45

  securityContext: {}

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1

  terminationGracePeriodSeconds: 180

  tolerations: []
  podDisruptionBudget: {}
  initContainers: []
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []
  extraPorts: []
  env: []

nginx:
  enabled: false
  replicas: 2
  http_listen_port: 80
  config:
    dnsResolver: kube-dns.kube-system.svc.cluster.local
  image:
    repository: nginx
    tag: 1.17
    pullPolicy: IfNotPresent

  service:
    annotations: {}
    labels: {}

  resources: {}
#    limits:
#      cpu: 100m
#      memory: 128Mi
#    requests:
#      cpu: 10m
#      memory: 16Mi

  ## Additional Cortex container arguments, e.g. log level (debug, info, warn, error)
  extraArgs:
    {}
    # log.level: debug

  ## Pod Labels
  podLabels: {}

  ## Pod Annotations
  podAnnotations:
    prometheus.io/scrape: ''
    prometheus.io/port: 'http-metrics'

  nodeSelector: {}
  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        preference:
          matchExpressions:
          - key: beta.kubernetes.io/arch
            operator: In
            values:
            - "amd64"
          - key: node-role.kubernetes.io/monitoring
            operator: Exists
  annotations: {}
  persistence:
    subPath:

  livenessProbe:
    httpGet:
      path: /healthz
      port: http-metrics
    initialDelaySeconds: 10
  readinessProbe:
    httpGet:
      path: /healthz
      port: http-metrics
    initialDelaySeconds: 10

  securityContext: {}

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1

  terminationGracePeriodSeconds: 10

  tolerations: []
  podDisruptionBudget: {}
  initContainers: []
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []
  extraPorts: []
  env: []

store_gateway:
  replicas: 1

  service:
    annotations: {}
    labels: {}

  resources: {}
#    limits:
#      cpu: 1
#      memory: 1Gi
#    requests:
#      cpu: 100m
#      memory: 512Mi

  ## Additional Cortex container arguments, e.g. log level (debug, info, warn, error)
  extraArgs:
    {}
    # log.level: debug

  ## Pod Labels
  podLabels: {}

  ## Pod Annotations
  podAnnotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: 'http-metrics'

  nodeSelector: {}
  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        preference:
          matchExpressions:
          - key: beta.kubernetes.io/arch
            operator: In
            values:
            - "amd64"
          - key: node-role.kubernetes.io/monitoring
            operator: Exists
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: target
                  operator: In
                  values:
                    - store-gateway
            topologyKey: 'kubernetes.io/hostname'

  annotations: {}

  persistentVolume:
    ## If true Store-gateway will create/use a Persistent Volume Claim
    ## If false, use emptyDir
    ##
    enabled: false

    ## Store-gateway data Persistent Volume Claim annotations
    ##
    annotations: {}

    ## Store-gateway data Persistent Volume access modes
    ## Must match those of existing PV or dynamic provisioner
    ## Ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    accessModes:
      - ReadWriteOnce

    ## Store-gateway data Persistent Volume size
    ##
    size: 2Gi

    ## Subdirectory of Store-gateway data Persistent Volume to mount
    ## Useful if the volume's root directory is not empty
    ##
    subPath: ''


    ## Store-gateway data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"

  livenessProbe:
    failureThreshold: 20 # 10 minutes failure threshold
    httpGet:
      path: /ready
      port: http-metrics
      scheme: HTTP
    initialDelaySeconds: 180
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 1
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 60

  securityContext: {}

  strategy:
    type: RollingUpdate

  terminationGracePeriodSeconds: 240

  tolerations: []
  podDisruptionBudget: {}
  initContainers: []
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []
  extraPorts: []
  env: []

compactor:
  enabled: true
  replicas: 1

  service:
    annotations: {}
    labels: {}

  resources: {}
#    limits:
#      cpu: 1
#      memory: 1Gi
#    requests:
#      cpu: 100m
#      memory: 512Mi

  ## Additional Cortex container arguments, e.g. log level (debug, info, warn, error)
  extraArgs:
    {}
    # log.level: debug

  ## Pod Labels
  podLabels: {}

  ## Pod Annotations
  podAnnotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: 'http-metrics'

  nodeSelector: {}
  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        preference:
          matchExpressions:
          - key: beta.kubernetes.io/arch
            operator: In
            values:
            - "amd64"
          - key: node-role.kubernetes.io/monitoring
            operator: Exists
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: target
                  operator: In
                  values:
                    - compactor
            topologyKey: 'kubernetes.io/hostname'

  annotations: {}

  persistentVolume:
    ## If true compactor will create/use a Persistent Volume Claim
    ## If false, use emptyDir
    ##
    enabled: false

    ## compactor data Persistent Volume Claim annotations
    ##
    annotations: {}

    ## compactor data Persistent Volume access modes
    ## Must match those of existing PV or dynamic provisioner
    ## Ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    accessModes:
      - ReadWriteOnce

    ## compactor data Persistent Volume size
    ##
    size: 2Gi

    ## Subdirectory of compactor data Persistent Volume to mount
    ## Useful if the volume's root directory is not empty
    ##
    subPath: ''


    ## compactor data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"

  livenessProbe:
    failureThreshold: 20 # 10 minutes failure threshold
    httpGet:
      path: /ready
      port: http-metrics
      scheme: HTTP
    initialDelaySeconds: 180
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 1
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 60

  securityContext: {}

  strategy:
    type: RollingUpdate

  terminationGracePeriodSeconds: 240

  tolerations: []
  podDisruptionBudget: {}
  initContainers: []
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []
  extraPorts: []
  env: []

gateway:
  enabled: true
  replicas: 3

  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        preference:
          matchExpressions:
          - key: beta.kubernetes.io/arch
            operator: In
            values:
            - "amd64"
          - key: node-role.kubernetes.io/monitoring
            operator: Exists

  jwt_secret: a55e0a3366a8d792799a80d6c725bc2c6285b74cff1af8370624333faccc022220933833484770a1b712e7e4fb4c68e37ce0b1f9b4c31e1d14cb7fed7a8e0f86

# chunk caching
memcached:
  enabled: false
  replicaCount: 2
  pdbMinAvailable: 1
  memcached:
    maxItemMemory: 3840
    extraArgs:
      - -I 32m
    threads: 32
  resources:
    requests:
      memory: 1Gi
      cpu: 10m
    limits:
      memory: 4Gi
      cpu: 1
  metrics:
    enabled: true
  #tolerations: {}
  # - key: "dedicated"
  #   operator: "Equal"
  #   value: "cortex-memcached"
  #   effect: "NoSchedule"
  #affinity: {}
  #   nodeAffinity:
  #     requiredDuringSchedulingIgnoredDuringExecution:
  #         nodeSelectorTerms:
  #         - matchExpressions:
  #           - key: dedicated
  #             operator: In
  #             values:
  #             - cortex-memcached

# blocks index caching
memcached-index:
  enabled: true
  replicaCount: 2
  pdbMinAvailable: 1
  memcached:
    maxItemMemory: 3840
    extraArgs:
    - -I 32m
    threads: 32
  resources:
    requests:
      memory: 1Gi
      cpu: 10m
    limits:
      memory: 4Gi
      cpu: 1
  metrics:
    enabled: true
  #tolerations: {}
  # - key: "dedicated"
  #   operator: "Equal"
  #   value: "cortex-memcached"
  #   effect: "NoSchedule"
  #affinity: {}
  #   nodeAffinity:
  #     requiredDuringSchedulingIgnoredDuringExecution:
  #         nodeSelectorTerms:
  #         - matchExpressions:
  #           - key: dedicated
  #             operator: In
  #             values:
  #             - cortex-memcached
  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        preference:
          matchExpressions:
          - key: beta.kubernetes.io/arch
            operator: In
            values:
            - "amd64"
          - key: node-role.kubernetes.io/monitoring
            operator: Exists

# blocks chunks caching
memcached-chunks:
  enabled: true
  replicaCount: 2
  pdbMinAvailable: 1
  memcached:
    maxItemMemory: 3840
    extraArgs:
    - -I 32m
    threads: 32
  resources:
    requests:
      memory: 1Gi
      cpu: 10m
    limits:
      memory: 4Gi
      cpu: 1
  metrics:
    enabled: true
  #tolerations: {}
  # - key: "dedicated"
  #   operator: "Equal"
  #   value: "cortex-memcached"
  #   effect: "NoSchedule"
  #affinity: {}
  #   nodeAffinity:
  #     requiredDuringSchedulingIgnoredDuringExecution:
  #         nodeSelectorTerms:
  #         - matchExpressions:
  #           - key: dedicated
  #             operator: In
  #             values:
  #             - cortex-memcached
  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        preference:
          matchExpressions:
          - key: beta.kubernetes.io/arch
            operator: In
            values:
            - "amd64"
          - key: node-role.kubernetes.io/monitoring
            operator: Exists

# blocks metadata caching
memcached-metadata:
  enabled: true
  replicaCount: 2
  pdbMinAvailable: 1
  memcached:
    maxItemMemory: 3840
    extraArgs:
    - -I 32m
    threads: 32
  resources:
    requests:
      memory: 1Gi
      cpu: 10m
    limits:
      memory: 4Gi
      cpu: 1
  metrics:
    enabled: true
  #tolerations: {}
  # - key: "dedicated"
  #   operator: "Equal"
  #   value: "cortex-memcached"
  #   effect: "NoSchedule"
  #affinity: {}
  #   nodeAffinity:
  #     requiredDuringSchedulingIgnoredDuringExecution:
  #         nodeSelectorTerms:
  #         - matchExpressions:
  #           - key: dedicated
  #             operator: In
  #             values:
  #             - cortex-memcached
  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        preference:
          matchExpressions:
          - key: beta.kubernetes.io/arch
            operator: In
            values:
            - "amd64"
          - key: node-role.kubernetes.io/monitoring
            operator: Exists

# index read caching
memcached-index-read:
  enabled: false
  replicaCount: 2
  #pdbMinAvailable: 1
  #image: memcached:1.5.7-alpine
  memcached:
    maxItemMemory: 3840
    extraArgs:
      - -I 32m
    threads: 32
  resources:
    requests:
      memory: 1Gi
      cpu: 10m
    limits:
      memory: 4Gi
      cpu: 1
  metrics:
    enabled: true
  #tolerations: []
  # - key: "dedicated"
  #   operator: "Equal"
  #   value: "cortex-memcached"
  #   effect: "NoSchedule"
  #affinity: {}
  #   nodeAffinity:
  #     requiredDuringSchedulingIgnoredDuringExecution:
  #         nodeSelectorTerms:
  #         - matchExpressions:
  #           - key: dedicated
  #             operator: In
  #             values:
  #             - cortex-memcached

# index write caching
memcached-index-write:
  enabled: false
  replicaCount: 2
  #dpdbMinAvailable: 1
  #image: memcached:1.5.7-alpine
  memcached:
    maxItemMemory: 3840
    extraArgs:
      - -I 32m
    threads: 32
  resources:
    requests:
      memory: 1Gi
      cpu: 10m
    limits:
      memory: 4Gi
      cpu: 1
  metrics:
    enabled: true
  #tolerations: []
  # - key: "dedicated"
  #   operator: "Equal"
  #   value: "cortex-memcached"
  #   effect: "NoSchedule"
  # affinity: {}
  #   nodeAffinity:
  #     requiredDuringSchedulingIgnoredDuringExecution:
  #         nodeSelectorTerms:
  #         - matchExpressions:
  #           - key: dedicated
  #             operator: In
  #             values:
  #             - cortex-memcached

configsdb_postgresql:
  enabled: true
  uri: postgres://configs@cortex-configs-db-postgresql:5432/configs?sslmode=disable
  auth:
    password:
    existing_secret:
      name: cortex-configs-db-postgresql
      key: postgresql-password
